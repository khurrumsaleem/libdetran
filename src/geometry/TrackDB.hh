//----------------------------------*-C++-*-----------------------------------//
/**
 *  @file  TrackDB.hh
 *  @brief TrackDB class definition
 */
//----------------------------------------------------------------------------//

#ifndef detran_geometry_TRACKDB_HH_
#define detran_geometry_TRACKDB_HH_

#include "geometry/geometry_export.hh"
#include "geometry/Track.hh"
#include "angle/ProductQuadrature.hh"
#include "utilities/DBC.hh"
#include "utilities/Definitions.hh"
#include "utilities/Iterators.hh"
#include <memory>
#include <vector>

namespace detran_geometry
{

/**
 *  @class TrackDB
 *  @brief Database of tracks.
 *
 *  TrackDB exists to provide easy access to tracks generated by
 *  Tracker or other means.  A TrackDB is constructed with a
 *  ProductQuadrature and a map of (octant, angle) indices to
 *  track vectors.
 */
/**
 *  @example geometry/test/test_TrackDB.cc
 *
 *  Test of TrackDB class
 */
class GEOMETRY_EXPORT TrackDB
{

public:

  //--------------------------------------------------------------------------//
  // ENUMERATIONS
  //--------------------------------------------------------------------------//

  enum DIRECTIONS
  {
    BACKWARD, FORWARD, END_DIRECTIONS
  };

  //--------------------------------------------------------------------------//
  // TYPEDEFS
  //--------------------------------------------------------------------------//

  typedef std::shared_ptr<detran_angle::ProductQuadrature>    SP_quadrature;
  typedef std::vector<std::shared_ptr<Track>>                 vec_track;
  typedef std::map<std::pair<int, int>, vec_track>            map_track;

  //--------------------------------------------------------------------------//
  // CONSTRUCTOR & DESTRUCTOR
  //--------------------------------------------------------------------------//

  /**
   *  @brief Constructor
   *  @param q        product quadrature
   *  @param tracks   vector of track pointers
   */
  TrackDB(SP_quadrature q, const map_track& tracks);

  //--------------------------------------------------------------------------//
  // PUBLIC FUNCTIONS
  //--------------------------------------------------------------------------//

  /// Get all the tracks.
  const map_track& tracks() const
  {
    return d_tracks;
  };
  map_track& tracks()
  {
    return d_tracks;
  };

  /// Get tracks for just one octant and angle.
  vec_track tracks(int o, int a) const
  {
    if (d_tracks.count({o, a}))
    {
      return d_tracks.at({o, a});
    }
    return vec_track(0);
  }

  /// Compute the volume for every region.
  std::vector<double> volume() const;

  /// Normalize the tracks given a vector of true region volumes.
  void normalize(const std::vector<double> &volume);

  /// Sort the tracks from left-to-right, bottom-to-top on an incident side.
  void sort();

  /// Pretty display of all tracks.
  void display() const;

private:

  //--------------------------------------------------------------------------//
  // DATA
  //--------------------------------------------------------------------------//
  /// map of octant,angle indices to vector of tracks.
  map_track d_tracks;
  ///
  /// Quadrature
  SP_quadrature d_quadrature;


};

GEOMETRY_TEMPLATE_EXPORT(detran_utilities::SP<TrackDB>)

} // end namespace detran_geometry

#endif // detran_geometry_TRACKDB_HH_

//----------------------------------------------------------------------------//
//              end of file TrackDB.hh
//----------------------------------------------------------------------------//
